import numpy as np 
from tensorflow.keras.datasets import mnist 
import matplotlib.pyplot as plt 


## Loading the dataset 
(x_train, y_train),(x_test, y_test) = mnist.load_data() 
x_train.shape,y_train.shape 
x_test.shape,y_test.shape 


## Dataset Details 
unique, count = np.unique(y_train, return_counts=True) 
print(unique,count) 
unique, count = np.unique(y_test, return_counts=True) 
print(unique,count) 
## Dataset samples 
index =[10,16,1888,2000,20005] 
images =x_train[index] 
labels = y_train[index] 



### Plotting image samples vertical 
plt.figure(figsize=(10,10)) 
for i in range(len(index)): 
plt.subplot(5,1,i+1) 
plt.imshow(images[i],cmap='gray') 
plt.title(labels[i]) 
plt.axis('off') 
plt.show() 
plt.figure(figsize=(10,10)) 
#horizental 
for i in range(len(index)): 
plt.subplot(1,5,i+1) 
plt.imshow(images[i],cmap='gray') 
plt.text(10,-4,labels[i],fontsize=12) 
plt.axis('off') 
plt.show() 
x_train.shape,y_train.shape 
x_test.shape,y_test.shape 




## Converting to 1d 
x_train = np.reshape(x_train, [-1, input_size]) 
x_train.shape 
x_test = np.reshape(x_test, [-1, input_size]) 
x_test.shape 




## Normalization 
x_train = x_train/255.0 
x_test = x_test/255.0 
x_train 




## One hot encoding 
from tensorflow.keras.utils import to_categorical 
y_train=to_categorical(y_train) 
y_test=to_categorical(y_test) 
y_train[:2] 




## Model Building 
from tensorflow.keras.models import Sequential 
from tensorflow.keras.layers import Dense 
model = Sequential() 
model.add(Dense(256,activation='relu',input_dim=input_size)) 
model.add(Dense(256,activation='relu')) 
model.add(Dense(10,activation='softmax')) 
model.summary() 
model.compile(optimizer= 'adam', loss='categorical_crossentropy',metrics=['accuracy']) 
model.fit(x_train,y_train,epochs=20,batch_size=128) 
loss,acc=model.evaluate(x_test,y_test) 
